import os
import logging
from dotenv import load_dotenv
from mistralai import Mistral

# Cargar API Key desde variables de entorno
load_dotenv()
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
MISTRAL_MODEL = os.getenv("MISTRAL_MODEL")

if not MISTRAL_API_KEY:
    raise ValueError("‚ö†Ô∏è ERROR: La API Key de Mistral no est√° configurada en el entorno.")

# Inicializar cliente de Mistral AI
client = Mistral(api_key=MISTRAL_API_KEY)

def format_response(raw_text):
    """
    Formatea la respuesta de Mistral AI en un formato m√°s estructurado y amigable.
    """
    formatted_text = raw_text.replace("###", "\n\n**")  # Convierte t√≠tulos en negritas
    formatted_text = formatted_text.replace("**", "###")  # Asegura que las listas est√©n bien formateadas
    return f"{formatted_text}\n\n---\nüì¢ *Generated by Basketball Scout AI*\n\nüîç **Want to know more? Write another question below:**"


def generate_response(user_message):
    """
    Env√≠a el mensaje del usuario a Mistral AI y devuelve la respuesta.
    """
    try:
        logging.info(f"üîé Enviando mensaje a Mistral: {user_message}")

        response = client.chat.complete(
            model=MISTRAL_MODEL,
            messages=[{"role": "user", "content": user_message}]
        )
        ai_message = response.choices[0].message.content  # ‚úÖ FIX: Usamos `.content` directamente

            # Intentamos parsear JSON si la IA gener√≥ datos estructurados
        try:
                data = eval(ai_message)  # Convertir string JSON a diccionario
                if isinstance(data, dict) and "player_name" in data:
                    # üì∑ Obtener imagen del jugador
                    player_image_url = f"https://www.basketball-reference.com/req/202106291/images/players/{data['player_name'].lower().replace(' ', '')[:5]}01.jpg"
                    
                    # Estructura de datos para el frontend
                    return {
                        "type": "player_info",
                        "image_url": player_image_url,
                        "player": {
                            "name": data["player_name"],
                            "team": data.get("team", "No team"),
                            "nationality": data.get("nationality", "Unknown"),
                            "age": data.get("age", "Unknown"),
                            "height": data.get("height", "Unknown"),
                            "position": data.get("position", "Unknown"),
                        }
                    }
        except Exception:
                pass
        # Si no es un jugador, devolver respuesta normal con formateo aplicado
        return {"type": "text", "content": format_response(ai_message)}
    except Exception as e:
        logging.error(f"‚ùå Error en la API de Mistral AI: {e}")
        return {"type": "error", "content": "Error al procesar la solicitud con Mistral AI."}

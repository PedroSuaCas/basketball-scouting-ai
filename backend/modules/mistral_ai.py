
import os
import logging
import json
import re # Para reemplazar cadenas
import requests
from bs4 import BeautifulSoup
from dotenv import load_dotenv
from mistralai import Mistral

# Cargar API Key desde variables de entorno
load_dotenv()
MISTRAL_API_KEY = os.getenv("MISTRAL_API_KEY")
MISTRAL_MODEL = os.getenv("MISTRAL_MODEL")

if not MISTRAL_API_KEY:
    raise ValueError("⚠️ ERROR: La API Key de Mistral no está configurada en el entorno.")

# Inicializar cliente de Mistral AI
client = Mistral(api_key=MISTRAL_API_KEY)



def format_response(raw_text):
    """
    Formatea la respuesta de Mistral AI en un formato más estructurado y amigable.
    - Convierte títulos de `###palabra###` en `• palabra` con negritas.
    - Asegura saltos de línea adecuados para mejorar la legibilidad.
    """
    # Reemplazar `###palabra###` por `• **palabra**`
    formatted_text = re.sub(r"###\s*(.*?)\s*###", r"\n\n• **\1**", raw_text)

    # Agregar firma y llamada a la acción al final del mensaje
    formatted_text += "\n\n---\n📢 *Generated by Basketball Scout AI*\n\n🔍 **Want to know more? Write another question below:**"

    return formatted_text

# funcion para encontrar el jugador en la respuesta de mistral y psarlo a basketball reference

def extract_player_name(text):
    """
    Busca un nombre completo en el texto (Formato: Nombre Apellido).
    Devuelve el nombre si lo encuentra, o None si no hay coincidencias.
    """
    match = re.search(r"([A-Z][a-z]+) ([A-Z][a-z]+)", text)
    
    if match:
        return f"{match.group(1)} {match.group(2)}"
    
    return None

# funcion basketball reference

def get_basketball_reference_player_info(player_name):
    """
    Busca el perfil del jugador en Basketball Reference y extrae información relevante.
    """
    try:
        # 🔎 Buscar el jugador en Basketball Reference
        search_url = f"https://www.basketball-reference.com/search/search.fcgi?search={player_name.replace(' ', '+')}"
        logging.info(f"📊 Buscando en Basketball Reference: {search_url}")

        response = requests.get(search_url)
        soup = BeautifulSoup(response.text, "html.parser")

        # 📌 Obtener la URL real del perfil del jugador
        player_link_tag = soup.find("div", class_="search-item-name")
        logging.info(f"🔗 player_link_tag: {player_link_tag}")
        if not player_link_tag or not player_link_tag.a:
            return {"error": "Jugador no encontrado en Basketball Reference"}

        player_href = player_link_tag.a["href"] # Extrae la URL relativa (ej: /players/j/jamesle01.html)
        logging.info(f"🔗 Ruta relativa del jugador en basketball reference {player_href}")
        player_url = f"https://www.basketball-reference.com{player_href}"
        logging.info(f"🔗 URL del jugador: {player_url}")

        # 📌 Extraer el identificador correcto del jugador desde la URL, para luego cargar la foto
        player_identifier = player_href.split("/")[-1].replace(".html", "")  # 'jamesle01'
        logging.info(f"🔗 Que he calculado para obtener la foto: {player_identifier}")

        # 📌 Extraer información desde la página del jugador
        response = requests.get(player_url)
        soup = BeautifulSoup(response.text, "html.parser")

        # 📷 Obtener imagen del jugador
        player_image_url = f"https://www.basketball-reference.com/req/202106291/images/headshots/{player_identifier}.jpg"

        # 📊 Extraer información clave del jugador
        player_info = {
            "name": player_name,
            "image_url": player_image_url,
        }

        # Buscar la tabla con datos biográficos
        bio_table = soup.find("table", {"id": "meta"})
        if bio_table:
            bio_rows = bio_table.find_all("p")
            for row in bio_rows:
                text = row.get_text()
                if "Position" in text:
                    player_info["position"] = text.split(":")[-1].strip()
                if "Born" in text:
                    player_info["age"] = text.split("(")[-1].split(")")[0].strip()
                if "Height" in text:
                    player_info["height"] = text.split(":")[-1].strip()
                if "Weight" in text:
                    player_info["weight"] = text.split(":")[-1].strip()
                if "Team" in text:
                    player_info["team"] = text.split(":")[-1].strip()

        return {
            "type": "player_info",
            "image_url": player_info["image_url"],
            "player": player_info
        }

    except Exception as e:
        logging.error(f"❌ Error en get_basketball_reference_player_info: {e}")
        return {"error": "Error interno al obtener información del jugador"}


def generate_response(user_message):
    """
    Envía el mensaje del usuario a Mistral AI y devuelve la respuesta.
    """
    try:
        logging.info(f"🔎 Enviando mensaje a Mistral: {user_message}")

        response = client.chat.complete(
            model=MISTRAL_MODEL,
            messages=[{"role": "user", "content": user_message}]
        )
        ai_message = response.choices[0].message.content 

        # 🔎 Intentamos extraer un nombre de jugador del texto
        player_name = extract_player_name(ai_message)
        logging.info(f"🔎 Nombre detectado en AI: {player_name}")

        # 🔎 Intentar obtener información del jugador si se menciona un nombre
        player_info = get_basketball_reference_player_info(user_message)
        logging.info (f"❌ Player_info: {player_info}")
    
        # Si no es un jugador, devolver respuesta normal con formateo aplicado
        return {"type": "text", "content": format_response(ai_message), "player_info": player_info}

    except Exception as e:
        logging.error(f"❌ Error en la API de Mistral AI: {e}")
        return {"type": "error", "content": "Error al procesar la solicitud con Mistral AI."}
